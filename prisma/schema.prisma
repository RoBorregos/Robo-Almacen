generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Item {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
  name        String
  description String
  category    String
  department  String
  imgPath     String      @default("")
  CeldaItem   CeldaItem[]
}

model Celda {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  name      String
  row       Int
  column    Int
  CeldaItem CeldaItem[]
}

model CeldaItem {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  quantity  Int
  available Int
  celdaId   String
  itemId    String
  Celda     Celda      @relation(fields: [celdaId], references: [id], onDelete: Cascade)
  Item      Item       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  Prestamo  Prestamo[]
}

model Prestamo {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  initialDate DateTime
  finalDate   DateTime?
  quantity    Int
  celdaItemId String
  userId      String
  returned    Boolean   @default(false)
  CeldaItem   CeldaItem @relation(fields: [celdaItemId], references: [id], onDelete: Cascade)
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Telemetry {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  value     String
}

model Example {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  hasData       Boolean    @default(false)
  accounts      Account[]
  Prestamo      Prestamo[]
  sessions      Session[]
  UserData      UserData?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User2 {
  id       String @id
  name     String
  email    String
  major    String
  semester String
  phone    String
  area     String
}

model UserData {
  id       String  @id
  major    String?
  phone    String?
  area     String?
  image    String?
  semester Int?
  user     User    @relation(fields: [id], references: [id], onDelete: Cascade)
}
